---
import '../styles/reader.scss';
---
<script is:inline src="/ndarray.js"></script>
<script is:inline src="/nifti-reader.js"></script>
<script is:inline src="/local-reader.js"> </script>
<div class="niftireader">
    <!--
        TODO: continuer le dev du système de drag & drop
    <div id="dropzone">Drop files here</div>
     <script>
      let dropzone = document.getElementById('dropzone');

      // Prevent default drag behaviors
      ['dragenter', 'dragover', 'dragleave', 'drop'].forEach(eventName => {
        dropzone.addEventListener(eventName, preventDefaults, false)
        document.body.addEventListener(eventName, preventDefaults, false)
      });
      // Handle dropped files
      dropzone.addEventListener('drop', handleDrop, false);

      function preventDefaults(e) {
        e.preventDefault();
        e.stopPropagation();
      }


      function handleDrop(e) {
        var dt = e.dataTransfer;
        var files = dt.files;

        handleFiles(files);
      }

      function handleFiles(files) {
        // Do something with the files
        console.log(files);
      }
    </script>
     -->
    <input type="file" id="file" name="files" />
    <canvas id="nifticanvas" class="nifticanvas" ></canvas>
    <div class="controllers">
        <div class="controller" id="controller-plan">
            <h3>Plan</h3>
            <div class="control-body">
                <input type="radio" id="axiale" name="selecoupe" value="axiale" checked>
                <label for="axiale">Axial</label>
                <input type="radio" id="sagittale" name="selecoupe" value="sagittale">
                <label for="sagittale">Sagittal</label>
                <input type="radio" id="coronale" name="selecoupe" value="coronale">
                <label for="coronale">Coronal</label>
            </div>
        </div>
        <div class="controller">
            <h3>Position</h3>
            <div class="control-body">
                <label for="niftislider" class="labelslider" id="slider-progress">50%</label>
                <input id="niftislider" class="niftislider" type="range" min="0" max="100" value="50" class="slider" >
            </div>
        </div>
        <div class="controller">
            <h3>Opacité</h3>
            <div class="control-body">
                <label for="opacityslider" class="labelslider" id="opacity-progress">100%</label>
                <input id="opacityslider" class="niftislider" type="range" min="0" max="255" value="254" class="slider">
            </div>
        </div>
    </div>
    
    <div id="legend"></div>
    <div id="filenames"></div>
</div>

<script type="text/javascript">
let currentfiles = [];
let id_current = -1;

function displayFiles(){
    if(currentfiles.length>0){
        drawNiftiFiles(document.getElementById('nifticanvas'),currentfiles.map(file => file.niftifile),getCoupe(),document.getElementById('niftislider').value)
    }
}

document.getElementById('niftislider').addEventListener('input',(evt)=>{
    document.getElementById('slider-progress').textContent = event.target.value +"%";
    displayFiles();
})

document.getElementById('opacityslider').addEventListener('input',(evt)=>{
    let op = +evt.target.value;
    document.getElementById('opacity-progress').innerText = Math.ceil((op)*100/255) +"%";
    if(id_current!=-1) currentfiles[id_current].niftifile.opacity = op;
    displayFiles();
})

async function addNewFile(f){
    if(f.name.endsWith(".nii")|| f.name.endsWith('.nii.gz')){
        return await readNiftiFile(f).then(infofile=>{
            if(infofile.isSegmentation){
                createLegend(infofile.classesSegmentation);
                let colorinputs = document.getElementsByClassName('dot');
                for (let col of colorinputs) {
                    col.oninput = displayFiles;
                }
            }
            infofile['opacity']=255;
            f['niftifile']=infofile;
            currentfiles.push(f);
            id_current = currentfiles.length-1;
            return true;
        })
    }
    return false;
}
document.getElementById('file').addEventListener('change', async (evt)=> {
    let f = evt.target.files[0];
    if(f!==undefined && await addNewFile(f)){
        displayFiles();
        displayFileNames();
    }
    // possibilité de charger 2 fois d'affilée le même fichier
    evt.target.onclick = ()=>{ evt.target.value=null;}
});

//N1 : nb de char a debut
//N2 : nb de char à la fin
const shortenString = (s, N1, N2) => s.length > N1 + N2 + 3 ? `${s.slice(0, N1)}...${s.slice(-N2)}` : s;

function displayFileNames(){
    let filenameControl = "";
    for(let i in currentfiles){
        let file = currentfiles[i]; 
        let name = shortenString(file.name,7,10);
        filenameControl += `<div class=filename id=file${i} title=${file.name}>`;
        let id='('+i+')'
        filenameControl+=  `<span>${name}</span>`;
        filenameControl += `<button onclick=deleteFile${id}>[X]</button>`;
        filenameControl+='<'+'/'+"div>"; 
    }
    let filenamesEl =  document.getElementById('filenames');
    filenamesEl.innerHTML = filenameControl;
    for(let filename of filenamesEl.getElementsByClassName('filename')){
        filename.children[0].addEventListener('click',(evt)=>{
            let id = +filename.id.replace("file","");
            id_current = id;
            displayFiles();
            updateIdCurrentFile();
        })
    }   
    updateIdCurrentFile();
}

function deleteFile(idFile){
    currentfiles.splice(idFile, 1);
    if(id_current>=idFile)id_current--;
    //check if  currentfiles contain a segmentation file
    const containsSegfile = currentfiles.some(file => file.niftifile.isSegmentation);
    if(!containsSegfile)removeLegend();
    if(currentfiles.length==0)resetLoadedCanvas();
    else {
        displayFiles();
    }
    displayFileNames();
}

// for graphical purposes, we want to identify which file is the current
function updateIdCurrentFile(){
   for(let el of document.getElementsByClassName('filename')){
    el.setAttribute('class','filename');
   }
   if(id_current!=-1) {
    document.getElementById('file'+id_current).setAttribute('class','filename current-filename');
    let op = currentfiles[id_current].niftifile.opacity;
    document.getElementById('opacityslider').value = op;
    document.getElementById('opacity-progress').innerText = Math.ceil((op)*100/255) +"%";
  }
}



function resetLoadedCanvas(){
    resetCanvas('nifticanvas','niftislider');
    currentfiles = [];
}
function getCoupe(){
    let coupe = "axiale";
    if(document.getElementById("sagittale").checked)coupe = "sagittale";
    else if(document.getElementById("coronale").checked)coupe = "coronale";
    return coupe;
}
function updateCurrentCoupe(){
    let coupes = document.getElementsByName("selecoupe");
    for(let selecoupe of coupes){
        selecoupe.addEventListener('change',(evt)=> {   
            displayFiles();
        })
    }
}
updateCurrentCoupe();
getCoupe();
</script>