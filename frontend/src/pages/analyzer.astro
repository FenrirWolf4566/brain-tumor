---
import Navigation from "../components/Navigation.astro";
import NiftiReader from "../components/NiftiReader.astro";
import Layout from "../layouts/Layout.astro"

import '../styles/analyzer.scss';
const title="Analyseur";

---

<Layout title={title} account>
  <script is:inline type="module">
    guard();
    await updateConnectedState()
    guard()
  </script>
    <Navigation title={title}></Navigation>
    <div class="instructions" id="introbloc">
      <span>
        C'est ici que se passe l'analyse.
      </span>
        <div class="analyzebuttons">
          <span id="loading-analyse" hidden>Analyse en cours...</span>
          <a class="analysebutton" id="download-button" hidden>
            Télécharger
          </a>
          <button class="analysebutton" id="cancelbutton" onclick="cancelUploads()" hidden>
            Effacer
          </button>
        </div>
      </div>
    
    <div class="instructions analyzer">
      <div class="instructions filedroppers">
        <div class="filedropper">
          <label id="filet1label" for="filet1">T1</label>
          <input id="filet1" type="file"  onchange="fileLoader(this.files,'t1',this);">
        </div>
        <div class="filedropper">
          <label id="filet1celabel" for="filet1ce">T1ce</label>
          <input id="filet1ce" type="file"  onchange="fileLoader(this.files,'t1ce',this);">
        </div>
        <div class="filedropper">
          <label id="filet2label" for="filet2">T2</label>
          <input id="filet2" type="file"  onchange="fileLoader(this.files,'t2',this)">
        </div>
        <div class="filedropper">
          <label id="fileflairlabel" for="fileflair">Flair</label>
          <input id="fileflair" type="file"  onchange="fileLoader(this.files,'flair',this)">
        </div>
      </div>  
      <div class="instructions">
        <NiftiReader></NiftiReader>
      </div>
  </div>
    
</Layout>

<script is:inline>
  const token = localStorage.getItem(SESSION_TOKEN);

  fetch(ROOT_URL+'files/',{method:'GET',headers:{'Authorization': `Bearer ${token}`}}).then(response=>response.json()).then((states)=>{
    filestatesupdate(states.loaded_files)
  })


  function fileLoader(files,filetype,callinginput){
    const data = new FormData()
    let file = files[0]
    data.append('file', file)
    fetch(ROOT_URL+'files/'+filetype, {
      method: 'POST',
      headers: {
      'Authorization': `Bearer ${token}`,
      },
      body: data,
    })
    .then(response => response.json())
    .then(async data => {
      // show file name 
      let span = callinginput.querySelector("span");
      if(span!==null)span.remove();
     
       let name = file.name
       let shortname = shortenString(name,3,9);
       let label =document.getElementById(callinginput.id+"label")
       label.innerHTML+='<span>'+(shortname)+"</span>";
       label.setAttribute('title',name)
       // change state of files (loaded files)
       filestatesupdate(data.loaded_files);
       if(await addNewFile(file)){
        //  displayCurrentFile();
         displayFiles();
         displayFileNames();
       }
    })
    .catch(error => {
      console.error(error)
    }); 
    //pouvoir recharger plusieurs fois le même fichier
    callinginput.value = null; 
  }

  function filestatesupdate(states){
    loadedFiles = 0;
    for (let filetype of states){
     let filelabel =  document.getElementById("file"+filetype+"label");
     if(filelabel!==null) filelabel.setAttribute("state","loaded")
     loadedFiles++;
    }
    if(loadedFiles==0){
      document.getElementById('cancelbutton').hidden=true;
    }
    else document.getElementById('cancelbutton').hidden=false;
    if(loadedFiles>=4){ //tous les fichiers d'anatomie sont chargés
      startAnalysis();
    }
  }

  function startAnalysis(){
    let loadingEl = document.getElementById('loading-analyse');
    loadingEl.hidden = false;
    const token = localStorage.getItem(SESSION_TOKEN);
    const url = ROOT_URL+"analyse";
    fetch(url,{
      method:"GET",
      headers: {
      'Authorization': `Bearer ${token}`,
      }
    })
    .then( (res) => res.blob()).then(async blob=>{
      if(await addNewFile(new File([blob],"response_seq.nii.gz"))){
        // displayCurrentFile();
        displayFiles();
        displayFileNames();
        setDownloadButton(blob)
        loadingEl.hidden = true;
      }
    }) 
  }

  function setDownloadButton(blob){
    var url = window.URL.createObjectURL(blob);
      var a = document.getElementById('download-button');
      a.href = url;
      a.download = "response_seq.nii.gz";
      a.hidden=false;
  }

  function cancelUploads(){
    // suppression des noms de fichiers
    Array.from(document.getElementsByClassName('filedroppers')[0].getElementsByClassName('filedropper')).forEach(e=>{
       let span = e.querySelector("span");
       if(span!==null)span.remove();
    })
    //appel de l'API pour indiquer que l'on souhaite effacer les fichiers déposés
    fetch(ROOT_URL+'files/cancel',{method:'GET',headers:{'Authorization': `Bearer ${token}`}}).then(response=>response.json()).then((states)=>{
      let filedroppers = document.getElementsByClassName('filedropper');
      for(let dropper of filedroppers){
        let label = dropper.children[0]
        label.setAttribute("state","notloadded");
      }
      document.getElementById('download-button').hidden=true;
      document.getElementById('cancelbutton').hidden=true;
      resetLoadedCanvas();
    })
  }
  
 </script>